[{"uri":"/","title":"Elemental MediaConvert 를 이용한 On-the-Fly HLS 배포","tags":[],"description":"","content":"Elemental MediaConvert 를 이용한 On-the-Fly HLS 배포  Elemental MediaConvert 는 비디오를 다양한 포맷으로 변환할 수 있는 서비스입니다. MediaConvert 의 주 사용 목적 중 하나는 업로드한 비디오를 HLS 형식으로 변환하여 이후에 VOD로 제공하기 위한 것입니다. 하지만, 길이가 긴 비디오를 업로드 하였을 경우, 변환에 긴 시간이 걸리기 때문에, 변환 작업이 진행되는 중에 HLS 비디오를 시청하고 싶을 수 있습니다. 이 워크샵에서는 On-the-Fly 로 Elemental MediaConvert 를 이용하여 변환이 진행되는 동안 영상을 시청할 수 있는 간단한 아키텍쳐를 구성해 보고, ABR 기능을 이용하여 사용자의 네트워크 환경에 따라 적합한 해상도의 영상을 송출할 수 있게 하는 설정을 구성하게 됩니다.\n "},{"uri":"/lab0/","title":"S3 버킷 생성하기","tags":[],"description":"","content":"사용자는 mp4 등의 형식으로 되어 있는 동영상을 업로드하게 됩니다. 업로드된 원본 동영상을 담을 S3 버킷, 그리고 변환이 완료된 영상을 담을 S3 버킷을 생성합니다.\nS3 Bucket 생성하기  S3 콘솔 에 접속합니다. \u0026ldquo;버킷 만들기\u0026rdquo; 버튼을 눌러 버킷 생성 페이지로 이동합니다. 버킷 이름을 지정합니다. 워크샵에서는 \u0026ldquo;emc-on-the-fly-source\u0026rdquo; 라는 이름을 이용하지만, 진행 중에는 다른 이름을 선택합니다.  이하 설정은 그대로 두고, \u0026ldquo;버킷 만들기\u0026rdquo; 를 눌러 버킷을 생성합니다. 위의 과정을 반복하여 새로운 S3 버킷을 생성합니다. 워크샵에서는 \u0026ldquo;emc-on-the-fly-destination\u0026rdquo; 이라는 이름을 사용합니다.  버킷 권한 설정하기  결과 버킷 (워크샵에서는 emc-on-the-fly-destination)을 선택합니다. \u0026ldquo;권한\u0026quot;을 누르고 스크롤을 가장 아래로 내려서 CORS 항목으로 이동합니다. \u0026ldquo;편집\u0026quot;을 누르고 다음을 붙여넣기 합니다.  [\r{\r\u0026quot;AllowedHeaders\u0026quot;: [\r\u0026quot;*\u0026quot;\r],\r\u0026quot;AllowedMethods\u0026quot;: [\r\u0026quot;GET\u0026quot;,\r\u0026quot;HEAD\u0026quot;\r],\r\u0026quot;AllowedOrigins\u0026quot;: [\r\u0026quot;*\u0026quot;\r],\r\u0026quot;ExposeHeaders\u0026quot;: [\r\u0026quot;x-amz-server-side-encryption\u0026quot;,\r\u0026quot;x-amz-request-id\u0026quot;,\r\u0026quot;x-amz-id-2\u0026quot;\r],\r\u0026quot;MaxAgeSeconds\u0026quot;: 3000\r}\r]\r "},{"uri":"/lab1/","title":"Elemental MediaConvert 설정하기","tags":[],"description":"","content":"Elemental MediaConvert 를 이용해서 사용자가 업로드한 영상을 HLS 형식으로 변환할 것입니다. 설정들을 Job Template 으로 구성하여 여러번 사용할 수 있도록 할 것입니다.\nMediaConvert 를 위한 IAM 역할 생성  IAM 콘솔 에 접속합니다. 좌측 탭에서 \u0026ldquo;역할\u0026rdquo; 을 선택합니다. \u0026ldquo;역할 만들기\u0026quot;를 선택합니다. AWS 서비스 - MediaConvert 를 선택합니다. 이하 설정은 기본값 그대로 계속 다음으로 이동합니다. 역할 이름으로 \u0026ldquo;MediaConvertRole\u0026rdquo; 을 입력한 후 \u0026ldquo;역할 만들기\u0026rdquo; 를 선택합니다.  Job Template 구성하기  MediaConvert 콘솔 에 접속합니다. 좌측 탭에서 \u0026ldquo;작업 템플릿\u0026rdquo; 을 선택합니다. \u0026ldquo;템플릿 생성\u0026rdquo; 을 선택합니다. 이름으로 \u0026ldquo;HLSOntheFly\u0026rdquo; 를 입력합니다. \u0026ldquo;출력 그룹\u0026rdquo; 옆의 \u0026ldquo;추가\u0026rdquo; 버튼을 누릅니다.  \u0026ldquo;Apple HLS\u0026rdquo; 를 선택합니다.  생성된 Apple HLS 출력그룹을 선택한 후, 스크롤을 내려 \u0026ldquo;출력\u0026rdquo; 항목으로 이동합니다. ABR 을 위해서 3가지 해상도로 출력을 할 것입니다. \u0026ldquo;출력 추가\u0026rdquo; 를 눌러 출력을 두 개 추가하고, 알맞은 이름 한정자를 설정해 줍니다. 이후에 Lambda 에서 이름 한정자를 이용하기 떄문에 270p, 360p, 720p, 1080p 중에서 이름 한정자를 선택합니다. 워크샵에서는 270p, 360p, 720p 를 선택합니다.  각각의 출력을 설정해 줍니다. 직접 설정해 줄 수도 있지만, 편의를 위해서 워크샵에서는 프리셋을 사용합니다. 출력을 선택한 후, 알맞은 프리셋을 적용합니다.  \u0026ldquo;생성\u0026quot;을 눌러 템플릿을 생성합니다.   "},{"uri":"/lab2/","title":"Lambda 함수 설정하기","tags":[],"description":"","content":"Lambda 함수를 이용해서 사용자가 동영상을 업로드 했을 때에 MediaConvert 작업을 실행하고, HLS 을 위한 manifest 파일을 작성해줍니다.\nMediaConvert 작업 실행 함수  Lambda 콘솔 에 접속합니다. \u0026ldquo;함수 생성\u0026rdquo; 을 선택합니다. \u0026ldquo;새로 작성\u0026quot;을 선택하고, 함수이름으로 \u0026ldquo;ConvertHLS\u0026rdquo; 를 입력합니다. 런타임으로 Python 3.9 를 선택합니다. \u0026ldquo;함수 생성\u0026quot;을 눌러 함수를 생성합니다. 코드 를 복사해서 함수의 코드 소스에 붙여넣기 합니다. 코드의 8~11 줄에 있는 변수들을 설정해 주고, Deploy 를 눌러 함수를 배포합니다.  JOB_TEMPLATE_NAME = \u0026quot;{MediaConvert Job Template}\u0026quot; # 생성한 Job Template 의 이름 (워크샵에서는 HLSOntheFly)\rROLE_ARN = \u0026quot;{MediaConvert Role Arn}\u0026quot; # IAM Role 의 Arn (워크샵에서는 생성한 MediaConvertRole 의 arn)\rSOURCE_BUCKET = \u0026quot;{Source S3 Bucket Name}\u0026quot; # 소스 버킷 이름 (워크샵에서는 emc-on-the-fly-source)\rDEST_BUCKET = \u0026quot;{Destination S3 Bucket Name}\u0026quot; # 결과 버킷 이름 (워크샵에서는 emc-on-the-fly-destination)\rMediaConvert 작업 실행 함수 트리거 설정하기  Lambda 함수의 \u0026ldquo;트리거 추가\u0026rdquo; 를 선택합니다.  S3 를 선택 후, 소스 버킷을 선택합니다. 이하 값들은 기본값으로 설정하고, 트리거를 생성합니다.   Manifest 준비 함수  Lambda 콘솔 에 접속합니다. \u0026ldquo;함수 생성\u0026rdquo; 을 선택합니다. \u0026ldquo;새로 작성\u0026quot;을 선택하고, 함수이름으로 \u0026ldquo;PrepareOntheFly\u0026rdquo; 를 입력합니다. 런타임으로 Python 3.9 를 선택합니다. \u0026ldquo;함수 생성\u0026quot;을 눌러 함수를 생성합니다. 코드 를 복사해서 함수의 코드 소스에 붙여넣기 합니다. Deploy 를 눌러 함수를 배포합니다.  Manifest 준비 함수 트리거 설정하기  Lambda 함수의 \u0026ldquo;트리거 추가\u0026rdquo; 를 선택합니다. S3 를 선택 후, 결과 버킷을 선택합니다. 접미사 항목에 \u0026ldquo;p.m3u8\u0026rdquo; 을 입력합니다.  트리거를 생성합니다.  Lambda 함수 권한 설정하기  두 함수 모두, 구성-권한 을 선택합니다. 역할 이름 밑의 링크를 클릭합니다. 정책 연결을 누른 후, AmazonS3FullAccess 와 AWSElementalMediaConvertFullAccess 정책을 연결합니다.    "},{"uri":"/lab3/","title":"CloudFront 배포 설정하기","tags":[],"description":"","content":"S3에 저장된 HLS 콘텐츠를 전달할 CloudFront 를 설정합니다.\nMediaConvert 작업 실행 함수  CloudFront 콘솔 에 접속합니다. \u0026ldquo;배포 생성\u0026quot;을 선택합니다. 원본 도메인으로 결과 s3 버킷을 선택합니다. S3 버킷 엑세스 에서 \u0026ldquo;예, OAI 사용\u0026rdquo; 을 선택하고, \u0026ldquo;새 OAI 생성\u0026rdquo; 을 선택합니다. \u0026ldquo;예, 버킷 정책 업데이트\u0026rdquo; 를 선택합니다.  캐시 정책에서 CachingDisabled 를 선택합니다.  배포 생성을 눌러 CloudFront 배포를 생성합니다. 생성이 완료되면, 이후 사용을 위해서 \u0026ldquo;배포 도메인\u0026quot;을 복사합니다.  "},{"uri":"/lab4/","title":"On the Fly 로 HLS 시청하기","tags":[],"description":"","content":"On the Fly 로 구성된 아키텍쳐를 통해 MediaConvert 작업이 진행되는 동안 영상을 시청해봅니다.\n간단한 데모를 위해서 시청하기 (기본) 를 시행합니다.\n "},{"uri":"/lab4/lab4-1/","title":"On the Fly 로 HLS 시청하기 (기본)","tags":[],"description":"","content":"MediaConvert 작업 실행 함수  S3 콘솔 에 접속합니다. 소스 버킷을 선택합니다. \u0026ldquo;업로드\u0026quot;를 눌러 동영상 파일을 업로드합니다. 다음 코드 을 다운받은 후, player.html 을 엽니다. MediaConvert 콘솔 에 접속하면, 작업이 생성되었음을 확인할 수 있습니다. 작업이 InQueue 에서 Transcoding 으로 변환될 때까지 기다립니다. player.html 에서 \u0026ldquo;{cloudfront 배포 도메인}/{확장자를 제외한 동영상 파일 이름}/master.m3u8\u0026rdquo; 을 입력하고, play 를 누르면, 동영상이 재생됩니다. 변환이 진행되면서, 동영상의 총 길이가 점점 늘어남을 확인할 수 있습니다. (영상이 재생되지 않을 경우, 재생 가능할 만큼 충분한 양이 변환되지 않은 것이므로, 조금 더 기다렸다가 play 를 누르는 것을 반복합니다.)   "},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"/credits/","title":"크레딧","tags":[],"description":"","content":"패키지와 라이브러리  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  도구  Netlify - Continuous deployement and hosting of this documentation Hugo  "}]